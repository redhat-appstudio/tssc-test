---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: tssc-e2e
spec:
  params:
    - name: ocp-login-command
      type: string
      description: Command to log in to the OpenShift cluster where the tests will be executed.
    - name: oci-container
      type: string
      description: The URI of the OCI container registry to store test artifacts.
    - name: job-spec
      type: string
      description: 'The job specification containing details of the test execution.'
    - name: tssc-test-image
      type: string
      description: 'The tssc test image containing the tssc test binary.'
    - name: testplan
      type: string
      description: 'Optional testplan.json content encoded in base64 format. If not provided, testplan will be downloaded from the repository.'
      default: ""
  volumes:
    - name: rhtap-cli-volume
      secret:
        secretName: rhtap-cli-install
    - name: konflux-test-infra-volume
      secret:
        secretName: konflux-test-infra
  steps:
    - name: copy-tssc-test
      image: $(params.tssc-test-image)
      securityContext:
        runAsUser: 0
      command: ['/bin/sh', '-c']
      args: ['mkdir -p /workspace/e2e-test && cp -r /tssc-test/* /workspace/e2e-test && chown -R 1001:0 /workspace/e2e-test && chmod -R 777 /workspace/e2e-test']
      workingDir: /workspace/e2e-test
    - name: generate-testplan
      image: $(params.tssc-test-image)
      workingDir: /workspace/e2e-test
      env:
        - name: JOB_SPEC
          value: '$(params.job-spec)'
        - name: TESTPLAN_PARAM
          value: '$(params.testplan)'
      script: |
        #!/usr/bin/env bash
        set -o errexit
        set -o nounset
        set -o pipefail

        echo "Printing JOB_SPEC"
        echo "--------------------------------"
        echo "$JOB_SPEC"
        echo "--------------------------------"

        # Check if testplan parameter is provided
        if [[ -n "$TESTPLAN_PARAM" ]]; then
          echo "Using provided testplan parameter (base64 encoded)"
          echo "Decoding base64 testplan and saving to testplan.json"
          echo "$TESTPLAN_PARAM" | base64 -d > testplan.json
        else
          echo "No testplan parameter provided, downloading from repository"
          GIT_REPO="$(jq -r '.git.repo // empty' <<< $JOB_SPEC)"
          REPO_ORG=$(jq -r '.git.source_repo_org' <<< $JOB_SPEC)
          BRANCH=$(jq -r '.git.source_repo_branch' <<< $JOB_SPEC)
          testplan_file_location="integration-tests/config/testplan.json"
          echo "downloading testplan.json from $REPO_ORG/$GIT_REPO/refs/heads/$BRANCH/$testplan_file_location"
          curl -o testplan.json https://raw.githubusercontent.com/$REPO_ORG/$GIT_REPO/refs/heads/$BRANCH/$testplan_file_location
        fi

        echo "Printing testplan.json file"
        echo "--------------------------------"
        cat testplan.json
        echo "--------------------------------"
    - name: run-tssc-e2e
      image: $(params.tssc-test-image)
      workingDir: /workspace/e2e-test
      volumeMounts:
        - name: rhtap-cli-volume
          mountPath: /usr/local/rhtap-cli-install
      onError: continue
      computeResources:
        limits:
          memory: 6Gi
        requests:
          cpu: 100m
          memory: 3Gi
      env:
        - name: JOB_SPEC
          value: '$(params.job-spec)'
      script: |
        #!/usr/bin/env bash
        set -o nounset
        set -o pipefail

        cat <<EOF > .env
        #!/bin/bash
        # shellcheck disable=SC2034

        export QUAY_REGISTRY_ORG="rhtap_qe"
        export ARTIFACTORY_REGISTRY_ORG="rhtap"
        export NEXUS_REGISTRY_ORG="rhtap"

        # ========================== GIT REPOSITORY ==========================
        # When using Github as git repository, set the following variables
        export GITHUB_ORGANIZATION="rhtap-rhdh-qe"

        # When using Bitbucket as git repository, set the following variables
        export BITBUCKET_WORKSPACE="rhtap-test"
        export BITBUCKET_PROJECT="RHTAP"

        # ========================== CI ======================================
        # When using Azure pipelines, set the following variables
        export AZURE_PROJECT="shared-public"
        EOF

        # Set CI_TEST_RUNNER_IMAGE if CI running for tssc-dev-multi-ci repo
        GIT_REPO="$(jq -r '.git.repo // empty' <<< $JOB_SPEC)"
        if [ "$GIT_REPO" = "tssc-dev-multi-ci" ]; then
          cat << EOF >> .env
        export CI_TEST_RUNNER_IMAGE="${CI_TEST_RUNNER_IMAGE:-$(echo "$JOB_SPEC" | jq -r '.container_image')}"
        EOF
        fi

        echo "Printing .env file"
        echo "--------------------------------"
        cat .env
        echo "--------------------------------"

        # Log into OpenShift
        $(params.ocp-login-command)

        source .env
        # Run tests and capture exit code
        TEST_EXIT_CODE=0
        FORCE_COLOR=false npm run test:e2e || TEST_EXIT_CODE=$?

        echo "Test execution completed with exit code: $TEST_EXIT_CODE"
        exit $TEST_EXIT_CODE
    - name: create-artifact-bundle
      image: $(params.tssc-test-image)
      workingDir: /workspace/e2e-test
      command: ['/bin/sh', '-c']
      args:
        - |
          set -ex
          echo "Creating artifact bundle"
          mkdir -p /workspace/e2e-test/artifacts && chmod 777 /workspace/e2e-test/artifacts
          tar -czvf /workspace/e2e-test/artifacts/e2e-artifacts.tar.gz playwright-report test-results tmp
    - name: upload-artifacts
      onError: continue
      ref:
        resolver: git
        params:
          - name: url
            value: https://github.com/konflux-ci/tekton-integration-catalog.git
          - name: revision
            value: main
          - name: pathInRepo
            value: stepactions/secure-push-oci/0.1/secure-push-oci.yaml
      params:
        - name: workdir-path
          value: /workspace/e2e-test/artifacts
        - name: oci-ref
          value: $(params.oci-container)-e2e-artifacts
        - name: credentials-volume-name
          value: konflux-test-infra-volume
        - name: oci-tag-expiration
          value: 1y
        - name: always-pass
          value: "false"
    - name: fail-if-any-step-failed
      ref:
        resolver: git
        params:
          - name: url
            value: https://github.com/konflux-ci/tekton-integration-catalog.git
          - name: revision
            value: main
          - name: pathInRepo
            value: stepactions/fail-if-any-step-failed/0.1/fail-if-any-step-failed.yaml
