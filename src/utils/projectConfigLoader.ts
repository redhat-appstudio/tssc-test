import { TestItem } from '../playwright/testItem';
import { readFileSync, existsSync } from 'fs';

export interface ProjectConfig {
  name: string;
  testItem: TestItem;
}

interface SerializedProjectConfig {
  name: string;
  testItem: any; // JSON representation of TestItem
}

/**
 * Load pre-generated project configurations from file
 * Configurations are generated by scripts/generateProjectConfig.ts before Playwright runs
 */
export function loadProjectConfigurations(): ProjectConfig[] {
  const configFilePath = './tmp/project-configs.json';
  
  if (!existsSync(configFilePath)) {
    console.error(`Project configuration file not found: ${configFilePath}`);
    console.error('Run: npm run generate-config');
    throw new Error('Project configurations not generated. Run the generate-config script first.');
  }

  try {
    const data = readFileSync(configFilePath, 'utf-8');
    const serializedConfigs: SerializedProjectConfig[] = JSON.parse(data);
    
    const projectConfigs = serializedConfigs.map(config => ({
      name: config.name,
      testItem: TestItem.fromJSON(config.testItem)
    }));

    return projectConfigs;

  } catch (error) {
    console.error('Failed to load project configurations:', error);
    throw new Error('Failed to load project configurations from file');
  }
}

/**
 * Extract TestItem instances from project configurations
 */
export function getTestItems(projectConfigs: ProjectConfig[]): TestItem[] {
  return projectConfigs.map(config => config.testItem);
} 